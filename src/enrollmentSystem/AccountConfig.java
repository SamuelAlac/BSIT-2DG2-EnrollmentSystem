package enrollmentSystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;


 // Define the AccountConfig class that inherits JFrame to create a GUI window
public class AccountConfig extends javax.swing.JFrame {
Connection studConnect = null;// Connection for student database
Connection adminConnect = null;// Connection for admin database
PreparedStatement pst = null;// PreparedStatement for executing SQL queries
ResultSet rs = null;// ResultSet for storing the result of SQL queries

    // Constructor for AccountConfig
    public AccountConfig() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accConfiguration = new javax.swing.JPanel();
        formTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        password_label = new javax.swing.JLabel();
        txt_pass = new javax.swing.JPasswordField();
        confirmpass_label = new javax.swing.JLabel();
        txt_confirmpass = new javax.swing.JPasswordField();
        back = new javax.swing.JButton();
        studReg = new javax.swing.JButton();
        txt_userno = new javax.swing.JTextField();
        userno_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        accConfiguration.setBackground(new java.awt.Color(246, 245, 242));

        formTitle.setBackground(new java.awt.Color(163, 67, 67));

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Configuration");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout formTitleLayout = new javax.swing.GroupLayout(formTitle);
        formTitle.setLayout(formTitleLayout);
        formTitleLayout.setHorizontalGroup(
            formTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formTitleLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );
        formTitleLayout.setVerticalGroup(
            formTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
        );

        password_label.setText("New Password");

        confirmpass_label.setText("Confirm Password");

        back.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        studReg.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        studReg.setText("Confirm");
        studReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studRegActionPerformed(evt);
            }
        });

        txt_userno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernoActionPerformed(evt);
            }
        });

        userno_label.setText("User No.");

        javax.swing.GroupLayout accConfigurationLayout = new javax.swing.GroupLayout(accConfiguration);
        accConfiguration.setLayout(accConfigurationLayout);
        accConfigurationLayout.setHorizontalGroup(
            accConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accConfigurationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(accConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmpass_label)
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password_label, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(accConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, accConfigurationLayout.createSequentialGroup()
                            .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(studReg, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txt_confirmpass, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt_userno, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userno_label, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(106, 106, 106))
        );
        accConfigurationLayout.setVerticalGroup(
            accConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accConfigurationLayout.createSequentialGroup()
                .addComponent(formTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(userno_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_userno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(password_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirmpass_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_confirmpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(accConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(studReg))
                .addGap(0, 149, Short.MAX_VALUE))
        );

        getContentPane().add(accConfiguration, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_usernoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usernoActionPerformed

    private void studRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studRegActionPerformed
        // Retrieve input values from form fields
        String userno = txt_userno.getText();
        String pass = txt_pass.getText();
        String confirmpass = txt_confirmpass.getText();
        String studSelect = "SELECT studentNo FROM STUDENT";
        String empSelect = "SELECT empNo FROM EMPLOYEE";

       // Check if any required field is empty
        if (userno.isEmpty() || pass.isEmpty() || confirmpass.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all the required fields.");
            return; // Exit the method without proceeding further
        }

        // Check if the user number starts with "20221"
        if(userno.startsWith("20221")){
            try{
            // Establish a connection to the student database
            studConnect = UserLogins.stud();
            pst = studConnect.prepareStatement(studSelect);// Prepare an SQL statement to select the user details
            rs = pst.executeQuery(); // Execute the query and store the result in the ResultSet
            
            // Check if the result set contains any rows
            if(rs.next()){     
                 // Check password constraints
                 if (pass.length() != 8 || !pass.matches("^[a-zA-Z]*[0-9]{2}[a-zA-Z0-9]*$")&& confirmpass.length() != 8 || !confirmpass.matches("^[a-zA-Z]*[0-9]{2}[a-zA-Z0-9]*$")) {
            JOptionPane.showMessageDialog(null, "Password should be limited to 8 characters, consist of only letters and digits, and contain at least two digits.");
            return;
            }
            // Check if the password and confirmation password match
            if(pass.equals(confirmpass) || confirmpass.equals(pass)){
                // Prepare an SQL statement to update the student's password
                String studUpdate = "UPDATE STUDENT set pass = '"+confirmpass+"' WHERE studentNo = '"+userno+"'"; 
                  pst = studConnect.prepareStatement(studUpdate);
                  pst.executeUpdate();// Execute the update
                  JOptionPane.showMessageDialog(null, "Update successfully");
        }else{
                 // Show an error message if the passwords do not match
                JOptionPane.showMessageDialog(null, "Password doesn't match");
            }               
        }else{
                  // Show an error message if the user is not found
                 JOptionPane.showMessageDialog(null, "User not found");
                 return;
            }                        
        }catch(Exception e){
            // Show an error message if an exception occurs
            JOptionPane.showMessageDialog(null, e);
        }
        // Check if the user number starts with "20231" or "20241"
        }else if(userno.startsWith("20231") || userno.startsWith("20241")){
            try{
            // Establish a connection to the admin database
            adminConnect = UserLogins.admin();
             // Prepare an SQL statement to select the employee details
            pst = adminConnect.prepareStatement(empSelect);
            rs = pst.executeQuery();// Execute the query and store the result in the ResultSet
            
            // Check if the ResultSet has any rows
            if(rs.next()){
             // Check password constraints
             if (pass.length() != 8 || !pass.matches("^[a-zA-Z]*[0-9]{2}[a-zA-Z0-9]*$")&& confirmpass.length() != 8 || !confirmpass.matches("^[a-zA-Z]*[0-9]{2}[a-zA-Z0-9]*$")) {
            JOptionPane.showMessageDialog(null, "Password should be limited to 8 characters, consist of only letters and digits, and contain at least two digits.");
            return;
             }
            // Check if the password and confirmation password match
            if(pass.equals(confirmpass) || confirmpass.equals(pass)){
                    // Prepare an SQL statement to update the employee's password
                String empUpdate = "UPDATE EMPLOYEE set pass = '"+confirmpass+"' WHERE empNo = '"+userno+"'"; 
                  pst = adminConnect.prepareStatement(empUpdate);
                  pst.executeUpdate();// Execute the update
                  JOptionPane.showMessageDialog(null, "Update successfully");
        }else{
                 // Show an error message if the passwords do not match
                JOptionPane.showMessageDialog(null, "Password doesn't match");
            }               
        }else if(!rs.next()){
                 // Show an error message if the user is not found
                 JOptionPane.showMessageDialog(null, "User not found");
                 return;
            }                
        }catch(Exception e){
             // Show an error message if an exception occurs
            JOptionPane.showMessageDialog(null, e);

        }  
     }else{
            // Show an error message if the user number is not recognized
            JOptionPane.showConfirmDialog(null, "User number is not recognized");
        }
           
    }//GEN-LAST:event_studRegActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        LoginForm login = new LoginForm();// Create a new instance of the LoginForm class
        login.setLocationRelativeTo(null);// Set the location of the LoginForm to center of the screen
        login.show();// Display the LoginForm
        this.dispose(); // Dispose of the current window
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountConfig().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel accConfiguration;
    public javax.swing.JButton back;
    public javax.swing.JLabel confirmpass_label;
    public javax.swing.JPanel formTitle;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel password_label;
    public javax.swing.JButton studReg;
    public javax.swing.JPasswordField txt_confirmpass;
    public javax.swing.JPasswordField txt_pass;
    public javax.swing.JTextField txt_userno;
    public javax.swing.JLabel userno_label;
    // End of variables declaration//GEN-END:variables
}
