/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package enrollmentSystem;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

// Define the LoginForm class that inherits JFrame to create a GUI window
public class LoginForm extends javax.swing.JFrame {
    Connection studConnect = null;// Connection for student database
    Connection staffConnect = null;// Connection for staff database
    Connection adminConnect = null;// Connection for admin database
    PreparedStatement pst = null;// PreparedStatement for executing SQL queries
    ResultSet rs = null;// ResultSet for storing the result of SQL queries
     int attempts = 3;// Initialize the login attempt counter to 3
    

    // Constructor for LoginForm
    public LoginForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fogotPass = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_userno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_pass = new javax.swing.JPasswordField();
        enrollNow = new javax.swing.JButton();
        signIn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(246, 245, 242));

        fogotPass.setText("Forgot password?");
        fogotPass.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fogotPassMouseMoved(evt);
            }
        });
        fogotPass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fogotPassMousePressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(163, 67, 67));

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Student Enrollment System");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
        );

        jLabel6.setText("User ID");

        txt_userno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernoActionPerformed(evt);
            }
        });

        jLabel4.setText("Password");

        enrollNow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/enrollmentSystem/Enroll-removebg-preview.png"))); // NOI18N
        enrollNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollNowActionPerformed(evt);
            }
        });

        signIn.setText("Sign in");
        signIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fogotPass, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(signIn))
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_userno, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                .addComponent(enrollNow, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(enrollNow, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(172, 172, 172))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_userno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fogotPass)
                            .addComponent(signIn))
                        .addGap(165, 165, 165))))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fogotPassMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogotPassMousePressed
        //to go to verification java class
        ForgotPass forgot = new ForgotPass(); // Create an instance of the ForgotPass class
        forgot.show();// Display the ForgotPass window
        forgot.setLocationRelativeTo(null);// Center the ForgotPass window on the screen
        this.dispose();// Close the current window
    }//GEN-LAST:event_fogotPassMousePressed

    private void fogotPassMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogotPassMouseMoved
        fogotPass.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_fogotPassMouseMoved

    private void txt_usernoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usernoActionPerformed

    private void enrollNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollNowActionPerformed
        // To go to the StudentEnrollment class
        StudentEnrollment studEnroll = new StudentEnrollment();// Create an instance of the StudentEnrollment class
        studEnroll.show();// Display the StudentEnrollment window
        studEnroll.setLocationRelativeTo(null);// Center the StudentEnrollment window on the screen
        this.dispose();// Close the current window
        
    }//GEN-LAST:event_enrollNowActionPerformed

    private void signInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInActionPerformed
        // Retrieve input values from form fields
        String userno = txt_userno.getText();
        String pass = txt_pass.getText();
        //get the date
        Date lDate = new Date();
        SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        String logDate = df.format(lDate);
        
        //get the time
        Date lTime = new Date();
        SimpleDateFormat tf = new SimpleDateFormat("HH:mm:ss.SSS");
        String logTime = tf.format(lTime);
        String posStaff = "staff";
        
        //Student Table 
        String studQuery = "SELECT * FROM STUDENT WHERE studentNo = '"+userno+"' AND pass = '"+pass+"'";
        //Employee Table
        String adminQuery = "SELECT * FROM EMPLOYEE WHERE empNo = '"+userno+"' AND pass = '"+pass+"'";
        
        if(userno.isEmpty() || pass.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please fill in all the required fields.");
        return; // Exit the method without proceeding further
        }
        //For Student Login
        if(userno.startsWith("20221")){
                // Prepare SQL queries to update login date and time, and to log the login event
                String updateDateQuery = "UPDATE STUDENT SET loginDate = '"+logDate+"' WHERE studentNo = '"+userno+"'";
                String updateTimeQuery = "UPDATE STUDENT SET loginTime = '"+logTime+"' WHERE studentNo = '"+userno+"'";
                String insertLog = "INSERT INTO STUDENT_LOG VALUES('"+userno+"','Logged in',default)";
            try{
                // Establish connection for student login
                studConnect = UserLogins.stud();
                pst = studConnect.prepareStatement(studQuery);
                rs = pst.executeQuery();
                String studstat = "Blocked"; //Status to block the student if necessary
                
                 // Query to check if the user exists
                String selectQuery = "SELECT * FROM STUDENT where studentNo = '"+userno+"'";
                 PreparedStatement selectPST = studConnect.prepareStatement(selectQuery);
                 ResultSet selectRS = selectPST.executeQuery();
                 // Check if the default password "Config" is used for account configuration
                 if(pass.equals("Config")){
                 new AccountConfig().show();
                 this.dispose();// Close the current window
                 
                 // If username/password is incorrect
        } else if (!rs.next() || pass.equals("Config")) {
            if (attempts > 0) {
                attempts--;// Decrease the number of remaining attempts
                JOptionPane.showMessageDialog(null, "Username or password is incorrect. " + attempts + " attempts remaining.");
            // Block the account after too many incorrect attempts
            if (attempts <= 0) {
                JOptionPane.showMessageDialog(null, "Too many incorrect login attempts. Your account has been blocked.");
                String studentUpdateQuery = "UPDATE STUDENT SET stat = '"+studstat+"' WHERE studentNo = '"+userno+"' OR pass = '"+pass+"'";
                PreparedStatement updatePrep = studConnect.prepareStatement(studentUpdateQuery);
                 updatePrep.executeUpdate();
                    }
                } else {
                JOptionPane.showMessageDialog(null, "Your account has been blocked due to too many incorrect login attempts.");
                }
                // Check if the account is blocked
                }else if(rs.getString("stat").equals("Blocked")){
                    JOptionPane.showMessageDialog(null, "Your account has been blocked. Please contact support for assistance.");
                // If the user exists and the account is not blocked
                }else if(selectRS.next() && rs.getString("studentNo").equals(selectRS.getString("studentNo"))){
                   // Update login date and time
                   pst = studConnect.prepareStatement(updateDateQuery);
                   pst.execute();
                   pst = studConnect.prepareStatement(updateTimeQuery);
                   pst.execute();
                   // Insert the login log
                   PreparedStatement insertlogPST = studConnect.prepareStatement(insertLog);
                   insertlogPST.execute();
                   // Open the student dashboard
                   StudDashboard stud = new StudDashboard();
                   stud.show();
                   stud.setLocationRelativeTo(null);
                   this.dispose();// Close the current window
                // If the user is not enrolled
               }else{
                   JOptionPane.showMessageDialog(null,"User is not yet enrolled");
               }
            }catch(Exception e){
                 // Display any exception that occurs
                JOptionPane.showMessageDialog(null,e);
            }
        //For Administrator
        }else if(userno.startsWith("20241")){
                // Prepare SQL queries to update login date and time, and to log the login event
                String updateDateAndTimeQuery = "UPDATE EMPLOYEE SET loginDate = '"+logDate+"', loginTime = '"+logTime+"' WHERE EmpNo = '"+userno+"'";
                String insertLog = "INSERT INTO EMPLOYEE_LOG VALUES('"+userno+"','Logged in',default)";
            try{
                // Establish connection for administrator login
                adminConnect = UserLogins.admin();
                pst = adminConnect.prepareStatement(adminQuery);
                rs = pst.executeQuery();
                
                 // Check if the default password "adminConfig" is used for account configuration
                 if(pass.equals("adminConfig")){
                 new AccountConfig().show();
                 this.dispose();// Close the current window
                 return;// Exit the method without proceeding further
                 }
                 // If username/password is incorrect
                if(!rs.next()){
                    JOptionPane.showMessageDialog(null, "User is not recognized");
                     // If the user exists
                }else{
                    // Update login date and time
                   pst = adminConnect.prepareStatement(updateDateAndTimeQuery);
                   pst.execute();
                   // Insert the login log
                   PreparedStatement insertlogPST = adminConnect.prepareStatement(insertLog);
                   insertlogPST.execute();
                   // Open the administrator dashboard
                    AdminDashboard admin = new AdminDashboard();
                    admin.show();
                    admin.setLocationRelativeTo(null);
                    this.dispose();// Close the current window
                }
                
                
            }catch(Exception e){
                // Display any exception that occurs
                JOptionPane.showMessageDialog(null,e);
            }
            //For Staff
        }else if(userno.startsWith("20231")){
                // Prepare SQL queries to update login date and time, and to log the login event
            String updateDateQuery = "UPDATE EMPLOYEE SET loginDate = '"+logDate+"' WHERE EmpNo = '"+userno+"'";
            String updateTimeQuery = "UPDATE EMPLOYEE SET loginTime = '"+logTime+"' WHERE EmpNo = '"+userno+"'";
            String insertLog = "INSERT INTO EMPLOYEE_LOG VALUES('"+userno+"','Logged in',default)";
            try{
                 // Establish connection for staff login
                staffConnect = UserLogins.staff();
                pst = staffConnect.prepareStatement(adminQuery);
                rs = pst.executeQuery();
                String staffstat = "Blocked";// Status to block the staff if necessary
                
                //Will be use to check if userno exist
                String selectQuery = "SELECT * FROM EMPLOYEE where empNo = '"+userno+"'";
                 PreparedStatement selectPST = staffConnect.prepareStatement(selectQuery);
                 ResultSet selectRS = selectPST.executeQuery();
                  // Check if the default password "adminConfig" is used for account configuration
                 if(pass.equals("adminConfig")){
                 new AccountConfig().show();
                 this.dispose();  // Close the current window
                 
            // If username/password is incorrect
            } else if (!rs.next() || pass.equals("adminConfig")) {
            if (attempts > 0) {
                attempts--;// Decrease the number of remaining attempts
                JOptionPane.showMessageDialog(null, "Username or password is incorrect. " + attempts + " attempts remaining.");
              // Block the account after too many incorrect attempts
            if (attempts <= 0) {
                JOptionPane.showMessageDialog(null, "Too many incorrect login attempts. Your account has been blocked.");
                String adminUpdateQuery = "UPDATE EMPLOYEE SET stat = '"+staffstat+"' WHERE empNo = '"+userno+"' OR pass = '"+pass+"'";
                PreparedStatement updatePrep = staffConnect.prepareStatement(adminUpdateQuery);
                updatePrep.executeUpdate();
                    }
                } else {
                JOptionPane.showMessageDialog(null, "Your account has been blocked due to too many incorrect login attempts.");
                }

                // Check if the account is blocked
                }else if(rs.getString("stat").equals("Blocked")){
                    JOptionPane.showMessageDialog(null, "Your account has been blocked. Please contact support for assistance.");
                // If the user exists and the account is not blocked
                }else if(selectRS.next() && rs.getString("empNo").equals(selectRS.getString("empNo"))){
                   // Update login date and time
                   pst = staffConnect.prepareStatement(updateDateQuery);
                   pst.execute();
                   pst = staffConnect.prepareStatement(updateTimeQuery);
                   pst.execute();
                   // Insert the login log
                   PreparedStatement insertlogPST = staffConnect.prepareStatement(insertLog);
                   insertlogPST.execute();
                    // Open the staff dashboard
                   StaffDashboard staffDash = new StaffDashboard();
                   staffDash.show();
                   staffDash.setLocationRelativeTo(null);
                   this.dispose();// Close the current window
                   
                 // If the user is not enrolled   
               }else{
                   JOptionPane.showMessageDialog(null,"User is not yet enrolled");
               }
            }catch(Exception e){
                  // Display any exception that occurs
                JOptionPane.showMessageDialog(null,e);
            }
        }
        
        
    }//GEN-LAST:event_signInActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginForm login = new LoginForm();
                login.show();
                login.setLocationRelativeTo(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enrollNow;
    private javax.swing.JLabel fogotPass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton signIn;
    private javax.swing.JPasswordField txt_pass;
    public javax.swing.JTextField txt_userno;
    // End of variables declaration//GEN-END:variables
}
